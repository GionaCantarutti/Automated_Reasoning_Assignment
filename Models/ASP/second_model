%instance

#const n = 5.

size(n).
%the two faces of a stone and a unqiue ID to allow duplicates
stone ((0,1),1).
stone ((1,0),2).
stone ((1,1),3).
stone ((2,0),4).
stone ((2,2),5).
stone ((6,2),6).
stone ((2,3),7).
stone ((3,5),8).
stone ((5,2),9).
stone ((5,0),10).
stone ((0,0),11).
stone ((5,2),12).
stone ((5,2),13).
stone ((0,2),14).
stone ((6,1),15).

%%%%% RULES %%%%%
%time goes from 0 to n^2
time (0..(n**2)).
% space-time coordinates
coordinates (1..n, 1..n, 0..(n**2)).
%if a stone exists, its opposite also exists
reversed((A, B), ID) :- stone((B, A), ID).
%if a stone exists, its two combinations also exist
combination(A,B) :- stone ((A,B), _).
combination(A,B) :- stone((B,A), _).
%placed domain
:- placed(_, _, _, ID), not stone(_, ID).
:- placed(X, Y, T, _), not coordinates(X, Y, T).
%each cell should have at most one placement
T1 = T :- placed(X, Y, T, _), placed(X, Y, T1, _).
ID = ID1 :- placed(X, Y, _, ID), placed(X, Y, _, ID1).
%each cell is either placed or not
1 { placed(X, Y, T, ID) : time(T), stone(_, T); non_placed(X, Y) } 1 :- X=1..n, Y=1..n. 
%0 { placed (X, Y, T, N1, N2) : time(T), combination(N1, N2) } 1 :- X=1..n, Y=1..n.
%each stone can only be used once
3 { X = X1; Y = Y1; T = T1 } 3:- placed(X, Y, T, ID), placed(X1, Y1, T1 ,ID).
%there is at most one placement per time step
T = T1 :- placed(X, Y, T, ID), placed(X, Y, T1, ID).
%if a stone is placed at an even time then the following placement is reversed
placed (X, Y, T+1, ID) :- placed (_, _, T, ID), (T\2) = 0, stone(_, ID), coordinates(X, Y, T).

#maximize { 1, (X, Y, T, ID) : placed(X, Y, T, ID) , coordinates(X, Y, T), stone(_, ID) }.
#show placed/4.